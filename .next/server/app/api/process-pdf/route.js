/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/process-pdf/route";
exports.ids = ["app/api/process-pdf/route"];
exports.modules = {

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fprocess-pdf%2Froute&page=%2Fapi%2Fprocess-pdf%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fprocess-pdf%2Froute.ts&appDir=%2Fhome%2Fricardolima%2Frepo%2Fnewsolution%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fhome%2Fricardolima%2Frepo%2Fnewsolution&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fprocess-pdf%2Froute&page=%2Fapi%2Fprocess-pdf%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fprocess-pdf%2Froute.ts&appDir=%2Fhome%2Fricardolima%2Frepo%2Fnewsolution%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fhome%2Fricardolima%2Frepo%2Fnewsolution&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   handler: () => (/* binding */ handler),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/dist/server/request-meta */ \"(rsc)/./node_modules/next/dist/server/request-meta.js\");\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next/dist/server/lib/trace/tracer */ \"(rsc)/./node_modules/next/dist/server/lib/trace/tracer.js\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/dist/shared/lib/router/utils/app-paths */ \"next/dist/shared/lib/router/utils/app-paths\");\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/dist/server/base-http/node */ \"(rsc)/./node_modules/next/dist/server/base-http/node.js\");\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! next/dist/server/web/spec-extension/adapters/next-request */ \"(rsc)/./node_modules/next/dist/server/web/spec-extension/adapters/next-request.js\");\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! next/dist/server/lib/trace/constants */ \"(rsc)/./node_modules/next/dist/server/lib/trace/constants.js\");\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! next/dist/server/instrumentation/utils */ \"(rsc)/./node_modules/next/dist/server/instrumentation/utils.js\");\n/* harmony import */ var next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! next/dist/server/send-response */ \"(rsc)/./node_modules/next/dist/server/send-response.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! next/dist/server/web/utils */ \"(rsc)/./node_modules/next/dist/server/web/utils.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! next/dist/server/lib/cache-control */ \"(rsc)/./node_modules/next/dist/server/lib/cache-control.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! next/dist/lib/constants */ \"(rsc)/./node_modules/next/dist/lib/constants.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__);\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! next/dist/shared/lib/no-fallback-error.external */ \"next/dist/shared/lib/no-fallback-error.external\");\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__);\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! next/dist/server/response-cache */ \"(rsc)/./node_modules/next/dist/server/response-cache/index.js\");\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__);\n/* harmony import */ var _home_ricardolima_repo_newsolution_src_app_api_process_pdf_route_ts__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./src/app/api/process-pdf/route.ts */ \"(rsc)/./src/app/api/process-pdf/route.ts\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/process-pdf/route\",\n        pathname: \"/api/process-pdf\",\n        filename: \"route\",\n        bundlePath: \"app/api/process-pdf/route\"\n    },\n    distDir: \".next\" || 0,\n    projectDir:  false || '',\n    resolvedPagePath: \"/home/ricardolima/repo/newsolution/src/app/api/process-pdf/route.ts\",\n    nextConfigOutput,\n    userland: _home_ricardolima_repo_newsolution_src_app_api_process_pdf_route_ts__WEBPACK_IMPORTED_MODULE_16__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\nasync function handler(req, res, ctx) {\n    var _nextConfig_experimental;\n    let srcPage = \"/api/process-pdf/route\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (false) {} else if (srcPage === '/index') {\n        // we always normalize /index specifically\n        srcPage = '/';\n    }\n    const multiZoneDraftMode = \"false\";\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage,\n        multiZoneDraftMode\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return null;\n    }\n    const { buildId, params, nextConfig, isDraftMode, prerenderManifest, routerServerContext, isOnDemandRevalidate, revalidateOnlyGenerated, resolvedPathname } = prepareResult;\n    const normalizedSrcPage = (0,next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__.normalizeAppPath)(srcPage);\n    let isIsr = Boolean(prerenderManifest.dynamicRoutes[normalizedSrcPage] || prerenderManifest.routes[resolvedPathname]);\n    if (isIsr && !isDraftMode) {\n        const isPrerendered = Boolean(prerenderManifest.routes[resolvedPathname]);\n        const prerenderInfo = prerenderManifest.dynamicRoutes[normalizedSrcPage];\n        if (prerenderInfo) {\n            if (prerenderInfo.fallback === false && !isPrerendered) {\n                throw new next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__.NoFallbackError();\n            }\n        }\n    }\n    let cacheKey = null;\n    if (isIsr && !routeModule.isDev && !isDraftMode) {\n        cacheKey = resolvedPathname;\n        // ensure /index and / is normalized to one key\n        cacheKey = cacheKey === '/index' ? '/' : cacheKey;\n    }\n    const supportsDynamicResponse = // If we're in development, we always support dynamic HTML\n    routeModule.isDev === true || // If this is not SSG or does not have static paths, then it supports\n    // dynamic HTML.\n    !isIsr;\n    // This is a revalidation request if the request is for a static\n    // page and it is not being resumed from a postponed render and\n    // it is not a dynamic RSC request then it is a revalidation\n    // request.\n    const isRevalidate = isIsr && !supportsDynamicResponse;\n    const method = req.method || 'GET';\n    const tracer = (0,next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.getTracer)();\n    const activeSpan = tracer.getActiveScopeSpan();\n    const context = {\n        params,\n        prerenderManifest,\n        renderOpts: {\n            experimental: {\n                dynamicIO: Boolean(nextConfig.experimental.dynamicIO),\n                authInterrupts: Boolean(nextConfig.experimental.authInterrupts)\n            },\n            supportsDynamicResponse,\n            incrementalCache: (0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'incrementalCache'),\n            cacheLifeProfiles: (_nextConfig_experimental = nextConfig.experimental) == null ? void 0 : _nextConfig_experimental.cacheLife,\n            isRevalidate,\n            waitUntil: ctx.waitUntil,\n            onClose: (cb)=>{\n                res.on('close', cb);\n            },\n            onAfterTaskError: undefined,\n            onInstrumentationRequestError: (error, _request, errorContext)=>routeModule.onRequestError(req, error, errorContext, routerServerContext)\n        },\n        sharedContext: {\n            buildId\n        }\n    };\n    const nodeNextReq = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextRequest(req);\n    const nodeNextRes = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextResponse(res);\n    const nextReq = next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.NextRequestAdapter.fromNodeNextRequest(nodeNextReq, (0,next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.signalFromNodeResponse)(res));\n    try {\n        const invokeRouteModule = async (span)=>{\n            return routeModule.handle(nextReq, context).finally(()=>{\n                if (!span) return;\n                span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false\n                });\n                const rootSpanAttributes = tracer.getRootSpanAttributes();\n                // We were unable to get attributes, probably OTEL is not enabled\n                if (!rootSpanAttributes) {\n                    return;\n                }\n                if (rootSpanAttributes.get('next.span_type') !== next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest) {\n                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                    return;\n                }\n                const route = rootSpanAttributes.get('next.route');\n                if (route) {\n                    const name = `${method} ${route}`;\n                    span.setAttributes({\n                        'next.route': route,\n                        'http.route': route,\n                        'next.span_name': name\n                    });\n                    span.updateName(name);\n                } else {\n                    span.updateName(`${method} ${req.url}`);\n                }\n            });\n        };\n        const handleResponse = async (currentSpan)=>{\n            var _cacheEntry_value;\n            const responseGenerator = async ({ previousCacheEntry })=>{\n                try {\n                    if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isOnDemandRevalidate && revalidateOnlyGenerated && !previousCacheEntry) {\n                        res.statusCode = 404;\n                        // on-demand revalidate always sets this header\n                        res.setHeader('x-nextjs-cache', 'REVALIDATED');\n                        res.end('This page could not be found');\n                        return null;\n                    }\n                    const response = await invokeRouteModule(currentSpan);\n                    req.fetchMetrics = context.renderOpts.fetchMetrics;\n                    let pendingWaitUntil = context.renderOpts.pendingWaitUntil;\n                    // Attempt using provided waitUntil if available\n                    // if it's not we fallback to sendResponse's handling\n                    if (pendingWaitUntil) {\n                        if (ctx.waitUntil) {\n                            ctx.waitUntil(pendingWaitUntil);\n                            pendingWaitUntil = undefined;\n                        }\n                    }\n                    const cacheTags = context.renderOpts.collectedTags;\n                    // If the request is for a static response, we can cache it so long\n                    // as it's not edge.\n                    if (isIsr) {\n                        const blob = await response.blob();\n                        // Copy the headers from the response.\n                        const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.toNodeOutgoingHttpHeaders)(response.headers);\n                        if (cacheTags) {\n                            headers[next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER] = cacheTags;\n                        }\n                        if (!headers['content-type'] && blob.type) {\n                            headers['content-type'] = blob.type;\n                        }\n                        const revalidate = typeof context.renderOpts.collectedRevalidate === 'undefined' || context.renderOpts.collectedRevalidate >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? false : context.renderOpts.collectedRevalidate;\n                        const expire = typeof context.renderOpts.collectedExpire === 'undefined' || context.renderOpts.collectedExpire >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? undefined : context.renderOpts.collectedExpire;\n                        // Create the cache entry for the response.\n                        const cacheEntry = {\n                            value: {\n                                kind: next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE,\n                                status: response.status,\n                                body: Buffer.from(await blob.arrayBuffer()),\n                                headers\n                            },\n                            cacheControl: {\n                                revalidate,\n                                expire\n                            }\n                        };\n                        return cacheEntry;\n                    } else {\n                        // send response without caching if not ISR\n                        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, response, context.renderOpts.pendingWaitUntil);\n                        return null;\n                    }\n                } catch (err) {\n                    // if this is a background revalidate we need to report\n                    // the request error here as it won't be bubbled\n                    if (previousCacheEntry == null ? void 0 : previousCacheEntry.isStale) {\n                        await routeModule.onRequestError(req, err, {\n                            routerKind: 'App Router',\n                            routePath: srcPage,\n                            routeType: 'route',\n                            revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                                isRevalidate,\n                                isOnDemandRevalidate\n                            })\n                        }, routerServerContext);\n                    }\n                    throw err;\n                }\n            };\n            const cacheEntry = await routeModule.handleResponse({\n                req,\n                nextConfig,\n                cacheKey,\n                routeKind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n                isFallback: false,\n                prerenderManifest,\n                isRoutePPREnabled: false,\n                isOnDemandRevalidate,\n                revalidateOnlyGenerated,\n                responseGenerator,\n                waitUntil: ctx.waitUntil\n            });\n            // we don't create a cacheEntry for ISR\n            if (!isIsr) {\n                return null;\n            }\n            if ((cacheEntry == null ? void 0 : (_cacheEntry_value = cacheEntry.value) == null ? void 0 : _cacheEntry_value.kind) !== next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE) {\n                var _cacheEntry_value1;\n                throw Object.defineProperty(new Error(`Invariant: app-route received invalid cache entry ${cacheEntry == null ? void 0 : (_cacheEntry_value1 = cacheEntry.value) == null ? void 0 : _cacheEntry_value1.kind}`), \"__NEXT_ERROR_CODE\", {\n                    value: \"E701\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode')) {\n                res.setHeader('x-nextjs-cache', isOnDemandRevalidate ? 'REVALIDATED' : cacheEntry.isMiss ? 'MISS' : cacheEntry.isStale ? 'STALE' : 'HIT');\n            }\n            // Draft mode should never be cached\n            if (isDraftMode) {\n                res.setHeader('Cache-Control', 'private, no-cache, no-store, max-age=0, must-revalidate');\n            }\n            const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.fromNodeOutgoingHttpHeaders)(cacheEntry.value.headers);\n            if (!((0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isIsr)) {\n                headers.delete(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER);\n            }\n            // If cache control is already set on the response we don't\n            // override it to allow users to customize it via next.config\n            if (cacheEntry.cacheControl && !res.getHeader('Cache-Control') && !headers.get('Cache-Control')) {\n                headers.set('Cache-Control', (0,next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__.getCacheControlHeader)(cacheEntry.cacheControl));\n            }\n            await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(cacheEntry.value.body, {\n                headers,\n                status: cacheEntry.value.status || 200\n            }));\n            return null;\n        };\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await handleResponse(activeSpan);\n        } else {\n            await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${req.url}`,\n                    kind: next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, handleResponse));\n        }\n    } catch (err) {\n        // if we aren't wrapped by base-server handle here\n        if (!activeSpan) {\n            await routeModule.onRequestError(req, err, {\n                routerKind: 'App Router',\n                routePath: normalizedSrcPage,\n                routeType: 'route',\n                revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                    isRevalidate,\n                    isOnDemandRevalidate\n                })\n            });\n        }\n        // rethrow so that we can handle serving error page\n        // If this is during static generation, throw the error again.\n        if (isIsr) throw err;\n        // Otherwise, send a 500 response.\n        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(null, {\n            status: 500\n        }));\n        return null;\n    }\n}\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fprocess-pdf%2Froute&page=%2Fapi%2Fprocess-pdf%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fprocess-pdf%2Froute.ts&appDir=%2Fhome%2Fricardolima%2Frepo%2Fnewsolution%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fhome%2Fricardolima%2Frepo%2Fnewsolution&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(rsc)/./src/app/api/process-pdf/route.ts":
/*!******************************************!*\
  !*** ./src/app/api/process-pdf/route.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n\nasync function POST(request) {\n    console.log('=== Iniciando processamento de PDF ===');\n    try {\n        const formData = await request.formData();\n        const file = formData.get('pdf');\n        if (!file) {\n            console.error('Nenhum arquivo PDF enviado');\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Nenhum arquivo PDF enviado'\n            }, {\n                status: 400\n            });\n        }\n        console.log(`Arquivo recebido: ${file.name}, Tamanho: ${file.size} bytes, Tipo: ${file.type}`);\n        // Verificar se é um arquivo PDF\n        if (!file.type.includes('pdf') && !file.name.toLowerCase().endsWith('.pdf')) {\n            console.error('Arquivo não é um PDF');\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Arquivo deve ser um PDF'\n            }, {\n                status: 400\n            });\n        }\n        // Verificar tamanho do arquivo (limite de 50MB)\n        if (file.size > 50 * 1024 * 1024) {\n            console.error('Arquivo muito grande:', file.size);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Arquivo muito grande. Limite de 50MB.'\n            }, {\n                status: 400\n            });\n        }\n        // Converter File para Buffer\n        console.log('Convertendo arquivo para buffer...');\n        const bytes = await file.arrayBuffer();\n        const buffer = Buffer.from(bytes);\n        console.log(`Buffer criado com ${buffer.length} bytes`);\n        // Processar PDF usando pdf-parse\n        console.log('Iniciando parse do PDF...');\n        let pdfData;\n        try {\n            const pdfParse = (await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! pdf-parse */ \"pdf-parse\", 23))).default;\n            pdfData = await pdfParse(buffer, {\n                // Configurações para PDFs grandes\n                max: 0,\n                version: 'v1.10.100' // Versão mais recente\n            });\n            console.log(`PDF processado: ${pdfData.numpages} páginas, ${pdfData.text.length} caracteres`);\n        } catch (pdfError) {\n            console.error('Erro detalhado ao processar PDF:', pdfError);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: `Erro ao ler o arquivo PDF: ${pdfError instanceof Error ? pdfError.message : 'Erro desconhecido'}`\n            }, {\n                status: 500\n            });\n        }\n        if (!pdfData.text || pdfData.text.length < 100) {\n            console.error('PDF não contém texto suficiente');\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'PDF não contém texto legível ou é muito pequeno'\n            }, {\n                status: 400\n            });\n        }\n        console.log('Iniciando parsing das questões...');\n        const questions = parseQuestionsFromPDF(pdfData.text);\n        console.log(`Questões extraídas: ${questions.length}`);\n        const result = {\n            questions,\n            metadata: {\n                totalQuestions: questions.length,\n                categories: Array.from(new Set(questions.map((q)=>q.category))),\n                extractedAt: new Date(),\n                pdfPages: pdfData.numpages,\n                pdfSize: file.size\n            }\n        };\n        console.log('=== Processamento concluído com sucesso ===');\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(result);\n    } catch (error) {\n        console.error('Erro geral ao processar PDF:', error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: `Falha ao processar o arquivo PDF: ${error instanceof Error ? error.message : 'Erro desconhecido'}`\n        }, {\n            status: 500\n        });\n    }\n}\nfunction parseQuestionsFromPDF(text) {\n    console.log('=== Iniciando parsing das questões ===');\n    const questions = [];\n    // Limpar e normalizar o texto\n    const cleanedText = text.replace(/[\\u00A0\\u1680\\u180E\\u2000-\\u200B\\u202F\\u205F\\u3000\\uFEFF]/g, ' ').replace(/\\r\\n/g, '\\n').replace(/\\r/g, '\\n').replace(/\\n+/g, '\\n').trim();\n    console.log(`Texto limpo: ${cleanedText.length} caracteres`);\n    // Tentar diferentes padrões para dividir questões\n    const patterns = [\n        // Padrão mais comum: \"Question 1\", \"Question 2\", etc.\n        /(?=Question\\s+\\d+[:\\.]?\\s)/gi,\n        // Padrão alternativo: \"1.\", \"2.\", etc. no início da linha\n        /(?=^\\d+[\\.\\)]\\s+)/gm,\n        // Padrão: \"Q1\", \"Q2\", etc.\n        /(?=^Q\\d+[:\\.]?\\s)/gm,\n        // Padrão: números seguidos de texto maiúsculo\n        /(?=^\\d+\\s+[A-Z][a-z])/gm,\n        // Padrão mais flexível: linha que começa com número\n        /(?=^\\d+\\s+)/gm\n    ];\n    let bestSplit = [];\n    let bestPatternName = '';\n    // Encontrar o padrão que gera mais divisões válidas\n    patterns.forEach((pattern, index)=>{\n        const patternNames = [\n            'Question X',\n            'X.',\n            'QX',\n            'X WORD',\n            'X '\n        ];\n        try {\n            const splits = cleanedText.split(pattern).filter((s)=>s.trim().length > 50);\n            console.log(`Padrão ${patternNames[index]}: ${splits.length} seções`);\n            if (splits.length > bestSplit.length) {\n                bestSplit = splits;\n                bestPatternName = patternNames[index];\n            }\n        } catch (e) {\n            console.error(`Erro no padrão ${patternNames[index]}:`, e);\n        }\n    });\n    // Se não encontrou padrões suficientes, tentar divisão por parágrafos duplos\n    if (bestSplit.length < 5) {\n        console.log('Tentando divisão por parágrafos duplos...');\n        bestSplit = cleanedText.split(/\\n\\s*\\n\\s*\\n/).filter((s)=>s.trim().length > 100);\n        bestPatternName = 'Parágrafos';\n    }\n    // Se ainda não encontrou, tentar divisão por parágrafos simples\n    if (bestSplit.length < 5) {\n        console.log('Tentando divisão por parágrafos simples...');\n        bestSplit = cleanedText.split(/\\n\\s*\\n/).filter((s)=>s.trim().length > 100);\n        bestPatternName = 'Parágrafos simples';\n    }\n    console.log(`Melhor padrão: ${bestPatternName} com ${bestSplit.length} seções`);\n    // Processar cada seção\n    bestSplit.forEach((section, index)=>{\n        try {\n            const question = parseQuestionSection(section, index + 1);\n            if (question) {\n                questions.push(question);\n                console.log(`Questão ${index + 1} processada: \"${question.questionText.substring(0, 50)}...\"`);\n            } else {\n                console.log(`Seção ${index + 1} não pôde ser parseada como questão`);\n            }\n        } catch (e) {\n            console.error(`Erro ao processar seção ${index + 1}:`, e);\n        }\n    });\n    console.log(`=== Parsing concluído: ${questions.length} questões extraídas ===`);\n    return questions;\n}\nfunction parseQuestionSection(section, questionNumber) {\n    try {\n        const lines = section.split('\\n').filter((line)=>line.trim().length > 0);\n        if (lines.length < 2) {\n            console.log(`Seção ${questionNumber} muito curta: ${lines.length} linhas`);\n            return null;\n        }\n        let questionText = '';\n        const options = [];\n        let correctAnswer = 'A';\n        let explanation = '';\n        let optionStartIndex = -1;\n        let explanationStartIndex = -1;\n        // Encontrar onde começam as opções\n        for(let i = 0; i < lines.length; i++){\n            const line = lines[i].trim();\n            // Verificar se é uma opção (A., B., C., D., E. ou A), B), etc.)\n            if (line.match(/^[A-E][\\.\\)]\\s+/i) && optionStartIndex === -1) {\n                optionStartIndex = i;\n                console.log(`Questão ${questionNumber}: Opções começam na linha ${i}`);\n                break;\n            }\n        }\n        // Encontrar onde começa a explicação\n        for(let i = optionStartIndex + 1; i < lines.length; i++){\n            const line = lines[i].trim().toLowerCase();\n            if (line.includes('explanation') || line.includes('answer') || line.includes('correct') || line.includes('rationale') || line.includes('solution') || line.includes('because') || line.startsWith('the correct answer')) {\n                explanationStartIndex = i;\n                console.log(`Questão ${questionNumber}: Explicação começa na linha ${i}`);\n                break;\n            }\n        }\n        // Extrair texto da questão\n        const questionEndIndex = optionStartIndex !== -1 ? optionStartIndex : lines.length;\n        let questionLines = lines.slice(0, questionEndIndex);\n        // Remover numeração e cabeçalhos\n        questionLines = questionLines.filter((line)=>{\n            const trimmed = line.trim();\n            return !trimmed.match(/^(?:Question\\s*\\d+|Q\\d+|\\d+[\\.\\)])\\s*$/i) && !trimmed.match(/^Page\\s+\\d+/i) && !trimmed.match(/^GH-200/i) && trimmed.length > 3;\n        });\n        questionText = questionLines.join(' ').trim();\n        // Extrair opções\n        if (optionStartIndex !== -1) {\n            const optionsEndIndex = explanationStartIndex !== -1 ? explanationStartIndex : lines.length;\n            let currentOption = '';\n            let currentLetter = '';\n            for(let i = optionStartIndex; i < optionsEndIndex; i++){\n                const line = lines[i].trim();\n                const optionMatch = line.match(/^([A-E])[\\.\\)]\\s+(.+)/i);\n                if (optionMatch) {\n                    // Se já tínhamos uma opção, adicionar ela\n                    if (currentOption && currentLetter) {\n                        options.push(currentOption);\n                    }\n                    currentLetter = optionMatch[1].toUpperCase();\n                    currentOption = optionMatch[2].trim();\n                    // Verificar se há indicadores de resposta correta\n                    if (line.includes('✓') || line.includes('*') || line.includes('(correct)')) {\n                        correctAnswer = currentLetter;\n                    }\n                } else if (currentOption && line.length > 0) {\n                    // Continuar a opção atual\n                    currentOption += ' ' + line;\n                }\n            }\n            // Adicionar a última opção\n            if (currentOption && currentLetter) {\n                options.push(currentOption);\n            }\n        }\n        // Extrair explicação\n        if (explanationStartIndex !== -1) {\n            const explanationLines = lines.slice(explanationStartIndex);\n            explanation = explanationLines.join(' ').trim();\n            // Tentar encontrar a resposta correta na explicação\n            const answerMatches = [\n                /(?:answer|correct).*?(?:is|:)\\s*([A-E])/i,\n                /([A-E])\\s+is\\s+(?:correct|right)/i,\n                /option\\s+([A-E])/i\n            ];\n            for (const answerMatch of answerMatches){\n                const match = explanation.match(answerMatch);\n                if (match) {\n                    correctAnswer = match[1].toUpperCase();\n                    break;\n                }\n            }\n        }\n        // Validar se temos o mínimo necessário\n        if (!questionText || questionText.length < 10) {\n            console.log(`Questão ${questionNumber}: Texto muito curto: \"${questionText}\"`);\n            return null;\n        }\n        // Se não temos opções, criar uma questão de resposta aberta\n        if (options.length === 0) {\n            options.push('Resposta A', 'Resposta B', 'Resposta C', 'Resposta D');\n        }\n        // Garantir que temos pelo menos 2 opções\n        if (options.length < 2) {\n            console.log(`Questão ${questionNumber}: Poucas opções: ${options.length}`);\n            return null;\n        }\n        // Detectar categoria e dificuldade\n        const category = detectCategory(questionText + ' ' + explanation);\n        const difficulty = detectDifficulty(questionText + ' ' + explanation);\n        // Extrair código se houver\n        const codeExample = extractCodeExample(section);\n        // Extrair tópicos relacionados\n        const relatedTopics = extractRelatedTopics(questionText + ' ' + explanation);\n        const question = {\n            id: `gh200-q${questionNumber}`,\n            questionText: cleanText(questionText),\n            questionType: 'multiple-choice',\n            options: options.map((opt)=>cleanText(opt)),\n            correctAnswer,\n            explanation: cleanText(explanation) || `Questão ${questionNumber} sobre ${category}`,\n            category,\n            difficulty,\n            codeExample,\n            relatedTopics,\n            page: Math.ceil(questionNumber / 10)\n        };\n        console.log(`Questão ${questionNumber} criada: ${options.length} opções, categoria: ${category}`);\n        return question;\n    } catch (error) {\n        console.error(`Erro ao processar seção ${questionNumber}:`, error);\n        return null;\n    }\n}\nfunction cleanText(text) {\n    return text.replace(/\\s+/g, ' ').replace(/[^\\w\\s\\-\\.\\,\\?\\!\\(\\)\\[\\]\\/\\:]/g, ' ').trim();\n}\nfunction detectCategory(text) {\n    const textLower = text.toLowerCase();\n    const categories = {\n        'Workflows': [\n            'workflow',\n            'job',\n            'step',\n            'trigger',\n            'event',\n            'yaml',\n            'yml',\n            'on:',\n            'runs-on',\n            'steps:',\n            'jobs:'\n        ],\n        'Actions': [\n            'action',\n            'marketplace',\n            'custom action',\n            'composite',\n            'uses:',\n            'action.yml',\n            'inputs:',\n            'outputs:'\n        ],\n        'Runners': [\n            'runner',\n            'self-hosted',\n            'ubuntu',\n            'windows',\n            'macos',\n            'ubuntu-latest',\n            'windows-latest',\n            'macos-latest'\n        ],\n        'Secrets': [\n            'secret',\n            'secrets.',\n            'environment',\n            'repository secret',\n            'organization secret',\n            'encrypted'\n        ],\n        'Security': [\n            'security',\n            'permission',\n            'token',\n            'GITHUB_TOKEN',\n            'vulnerability',\n            'permissions:',\n            'contents:'\n        ],\n        'Deployment': [\n            'deploy',\n            'deployment',\n            'environment',\n            'production',\n            'staging',\n            'release',\n            'publish'\n        ],\n        'Artifacts': [\n            'artifact',\n            'artifacts',\n            'upload-artifact',\n            'download-artifact',\n            'cache',\n            'caching'\n        ],\n        'Matrix': [\n            'matrix',\n            'strategy',\n            'include',\n            'exclude',\n            'matrix.'\n        ],\n        'Conditional': [\n            'if:',\n            'condition',\n            'success()',\n            'failure()',\n            'always()',\n            'cancelled()'\n        ],\n        'Expressions': [\n            'expression',\n            '${{',\n            '}}',\n            'github.',\n            'env.',\n            'vars.',\n            'runner.',\n            'steps.'\n        ]\n    };\n    for (const [category, keywords] of Object.entries(categories)){\n        if (keywords.some((keyword)=>textLower.includes(keyword))) {\n            return category;\n        }\n    }\n    return 'General';\n}\nfunction detectDifficulty(text) {\n    const textLower = text.toLowerCase();\n    const advancedKeywords = [\n        'matrix',\n        'strategy',\n        'composite action',\n        'custom action',\n        'webhook',\n        'api',\n        'advanced',\n        'complex',\n        'enterprise',\n        'self-hosted',\n        'docker',\n        'kubernetes'\n    ];\n    const beginnerKeywords = [\n        'basic',\n        'simple',\n        'introduction',\n        'getting started',\n        'first',\n        'initial',\n        'hello world',\n        'checkout'\n    ];\n    const advancedScore = advancedKeywords.filter((keyword)=>textLower.includes(keyword)).length;\n    const beginnerScore = beginnerKeywords.filter((keyword)=>textLower.includes(keyword)).length;\n    if (advancedScore >= 2) return 'advanced';\n    if (beginnerScore >= 2) return 'beginner';\n    return 'intermediate';\n}\nfunction extractCodeExample(text) {\n    // Procurar por blocos de código YAML/JSON\n    const codePatterns = [\n        /```(?:yaml|yml)?\\n([\\s\\S]*?)```/gi,\n        /(?:^|\\n)((?:name:|on:|jobs:|steps:|uses:|run:)[\\s\\S]*?)(?=\\n\\n|\\n[A-Z]|$)/gm\n    ];\n    for (const pattern of codePatterns){\n        const match = text.match(pattern);\n        if (match && match[1]) {\n            const code = match[1].trim();\n            if (code.length > 20) {\n                return code;\n            }\n        }\n    }\n    return undefined;\n}\nfunction extractRelatedTopics(text) {\n    const topics = [\n        'GitHub Actions',\n        'Workflows',\n        'Jobs',\n        'Steps',\n        'Triggers',\n        'Events',\n        'Runners',\n        'Secrets',\n        'Environment Variables',\n        'Artifacts',\n        'Caching',\n        'Matrix Strategy',\n        'Conditional Execution',\n        'Custom Actions',\n        'Marketplace',\n        'Security',\n        'Permissions',\n        'Deployment',\n        'CI/CD'\n    ];\n    const textLower = text.toLowerCase();\n    return topics.filter((topic)=>textLower.includes(topic.toLowerCase())).slice(0, 6);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/process-pdf/route.ts\n");

/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "./work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "next/dist/shared/lib/no-fallback-error.external":
/*!******************************************************************!*\
  !*** external "next/dist/shared/lib/no-fallback-error.external" ***!
  \******************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/no-fallback-error.external");

/***/ }),

/***/ "next/dist/shared/lib/router/utils/app-paths":
/*!**************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/app-paths" ***!
  \**************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/app-paths");

/***/ }),

/***/ "pdf-parse":
/*!****************************!*\
  !*** external "pdf-parse" ***!
  \****************************/
/***/ ((module) => {

"use strict";
module.exports = require("pdf-parse");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fprocess-pdf%2Froute&page=%2Fapi%2Fprocess-pdf%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fprocess-pdf%2Froute.ts&appDir=%2Fhome%2Fricardolima%2Frepo%2Fnewsolution%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fhome%2Fricardolima%2Frepo%2Fnewsolution&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!")));
module.exports = __webpack_exports__;

})();